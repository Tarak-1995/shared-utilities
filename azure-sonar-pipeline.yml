# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - $(sourceBranch)
  
resources:
  - repo: self

name: '1.0$(Rev:.r)'

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Env vars
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  HELM_EXPERIMENTAL_OCI: 1
  imageVersion: $(Build.BuildNumber)
  helmChartVersion: $(Build.BuildNumber)
  
  # .sln .csproj(UnitTests) relative paths
  project_sln: "./*.sln"
  project_csproj: "./PrimeroEdge.AccountManagement.WebAPI/PrimeroEdge.AccountManagement.WebAPI.csproj"
  test_csproj: "./PrimeroEdge.AccountManagement.UnitTests/PrimeroEdge.AccountManagement.UnitTests.csproj"

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '00b5803d-7838-4b83-9bcf-0252a1fa70cf'
  imageRepository: 'primeroedgeaccountmanagement'
  qaimageRepository: 'primeroedgeaccountmanagement_qa'
  stgimageRepository: 'primeroedgeaccountmanagement_stg'
  projectName: 'accountmanagement'
  helmchartdev: 'accountmanagement-dev'
  containerRegistry: 'perseusnonprodacr.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag:  '$(Build.BuildId)'
  helmChartPath: './PrimeroEdge.AccountManagement.WebAPI/devops/deployment/accountmanagement/'
  

stages:
- stage: BuildandAnalysis
  displayName: Build and Analysis
  jobs:
  - job: SLNBuild
    steps:

    - task: SonarQubePrepare@4
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev')) 
      displayName: 'Prepare Sonarqube analysis'
      continueOnError: true
      inputs:
        SonarQube: 'Perseus SonarQube New'
        scannerMode: 'MSBuild'
        projectKey: 'PrimeroEdge.AccountManagement'
        projectName: 'PrimeroEdge.AccountManagement'

   # - task: DotNetCoreCLI@2
   #   displayName: 'Restore nuget packages'
   #   inputs:
   #     command: restore
   #     projects: '**/*.csproj'
   #     feedsToUse: 'config'
   #     nugetConfigPath: './NuGet.Config'
  
    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: build
        projects: '$(project_csproj)'
        arguments: '/p:RunCodeAnalysis=true'
        configuration: '$(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Execute Unit Tests - Opencover report'
      inputs:
        command: test
        projects: '$(test_csproj)'
        arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    
    - task: DotNetCoreCLI@2
      displayName: 'Install ReportGenerator tool'
      inputs:
        command: custom
        custom: tool
        arguments: install --tool-path . dotnet-reportgenerator-globaltool
    
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/*.xml'

    - task: BuildQualityChecks@7
      displayName: 'Check build quality'
      inputs:
        checkWarnings: true
        warningFailOption: 'fixed'
        warningThreshold: '10000'
        checkCoverage: true
        coverageFailOption: 'fixed'
        coverageType: 'lines'
        coverageThreshold: '0'

    - task: SonarQubeAnalyze@4
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev')) 
      displayName: 'Run Sonarqube analysis'
      continueOnError: true
    
    - task: SonarQubePublish@4
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev')) 
      displayName: 'Publish Sonarqube results'
      continueOnError: true
      inputs:
        pollingTimeoutSec: '300'
  