# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger: none
#- $(Build.SourceBranch)

name: '2.0$(Rev:.r)'  #now change into 2.0 version as of now we have only previous version 1.0

resources:
- repo: self

variables:
  # Env vars
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  HELM_EXPERIMENTAL_OCI: 1
  imageVersion: $(Build.BuildNumber)
  helmChartVersion: $(Build.BuildNumber)
  imageName: PerseusNonProdACR.azurecr.io/sharedutilities-dev:$(Build.BuildNumber)
  # .sln .csproj(UnitTests) relative paths
  project_sln: "PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.sln"
  project_csproj: "./PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/PrimeroEdge.SharedUtilities.Api.csproj"
  test_csproj: "./PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.UnitTests/PrimeroEdge.SharedUtilities.UnitTests.csproj"
  

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '0308b8a7-8ae6-4c18-b610-58fe54dc62c4'
  imageRepository: 'sharedutilities-dev'
  projectName: 'sharedutilities'
  helmchartdev: 'sharedutilities-dev'
  containerRegistry: 'perseusnonprodacr.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'perseusnonprodacr206701cc-auth'

  helmChartPath: './PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/devops/deployment/sharedutilities/'
  # Agent VM image name
  vmImageNameW: 'vs2017-win2016'
  vmImageNameU: 'ubuntu-latest'

stages:
- stage: BuildandAnalysis
  displayName: Build and Analysis
  jobs:
  - job: SLNBuild
    steps:
    - task: NuGetCommand@2
      inputs:  
        restoreSolution:  '--configfile NuGet.Config $(project_sln)'
    - script: dotnet build --configuration $(buildConfiguration)
      workingDirectory: "./PrimeroEdge.SharedUtilities"
      displayName: 'dotnet build $(buildConfiguration)'
  
  - job: CodeAM
    displayName: Code Analysis and Metrics
    dependsOn: SLNBuild 
    #pool:
      #vmImage: $(vmImageNameW)
    pool:
      vmImage: 'ubuntu-20.04'


    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: build
        projects: '$(project_csproj)'
        arguments: '/p:RunCodeAnalysis=true'
        configuration: '$(buildConfiguration)'

    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: '$(test_csproj)'
        arguments: '--configuration $(buildConfiguration)'
