# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- $(Build.SourceBranch)

resources:
- repo: self

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Env vars
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'

  # .sln .csproj(UnitTests) relative paths
  project_sln: "./*.sln"
  project_csproj: "./PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/PrimeroEdge.SharedUtilities.Api.csproj"
  test_csproj: "./PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.UnitTests/PrimeroEdge.SharedUtilities.UnitTests.csproj"

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'c789fcf2-0f5c-47c7-9610-e0148479b574'
  imageRepository: 'sharedutilities'
  qaimageRepository: 'primeroedgesharedutilitiesapi_qa'
  containerRegistry: 'primeroedgedevacr.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  helmChartPath: './PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/devops/deployment/sharedutilities'

stages:
- stage: BuildandAnalysis
  displayName: Build and Analysis
  jobs:
  - job: SLNBuild
    steps:
    - task: SonarQubePrepare@4
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/Dev')) 
      displayName: 'Prepare Sonarqube analysis'
      inputs:
        SonarQube: 'PrimeroEdge 2.0 Sonarqube'
        scannerMode: 'MSBuild'
        projectKey: 'PrimeroEdge.SharedUtilities'
        projectName: 'PrimeroEdge.SharedUtilities'
    
    - task: DotNetCoreCLI@2
      displayName: 'Restore Nugget Packages - $(buildConfiguration)'
      inputs:
        command: restore
        projects: '**/*.csproj'
        feedsToUse: 'config'
        nugetConfigPath: './NuGet.Config'
  
    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: build
        projects: '$(project_csproj)'
        arguments: '/p:RunCodeAnalysis=true'
        configuration: '$(buildConfiguration)'
  
    - task: DotNetCoreCLI@2
      displayName: 'Execute Unit Tests - Opencover report'
      inputs:
        command: test
        projects: '$(test_csproj)'
        arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    
    - task: DotNetCoreCLI@2
      displayName: 'Install ReportGenerator tool'
      inputs:
        command: custom
        custom: tool
        arguments: install --tool-path . dotnet-reportgenerator-globaltool
    
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/*.xml'

    - task: BuildQualityChecks@7
      displayName: 'Check build quality'
      inputs:
        checkWarnings: true
        warningFailOption: 'fixed'
        warningThreshold: '5000'
        
    - task: SonarQubeAnalyze@4
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/Dev')) 
      displayName: 'Run Sonarqube analysis'

    
    - task: SonarQubePublish@4
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/Dev')) 
      displayName: 'Publish Sonarqube results'
      inputs:
        pollingTimeoutSec: '300'

    - task: Docker@2
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/Dev'))
      displayName: Image Build $ Push
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    - task: Docker@2
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      displayName: Image Build $ Push
      inputs:
        command: buildAndPush
        repository: $(qaimageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest      

- stage: HelmInstall
  displayName: Helm Install
  dependsOn: BuildandAnalysis
  jobs: 
  - job: Init
    steps:
    - task: HelmInstaller@1
      inputs:
        helmVersionToInstall: 'latest'

    - task: HelmDeploy@0
      displayName: Helm Chart Package
      inputs:
        command: 'package'
        chartPath: $(helmChartPath)
        destination: $(Build.ArtifactStagingDirectory)
        chartName: 'eligibility'

    - task: PublishPipelineArtifact@1
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/Dev'))
      inputs:
        targetPath: '$(Pipeline.Workspace)/a/eligibility-0.1.0.tgz'
        artifact: 'eligibility-dev'
        publishLocation: 'pipeline'
    - task: PublishPipelineArtifact@1
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        targetPath: '$(Pipeline.Workspace)/a/eligibility-0.1.0.tgz'
        artifact: 'eligibility-qa'
        publishLocation: 'pipeline'    
    - task: PublishPipelineArtifact@1
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/Dev'))
      inputs:
        targetPath: 'PrimeroEdge.SharedUtilities.Api/devops/deployment/sharedutilities/values.dev.yaml'
        artifact: 'dev_values'
        publishLocation: 'pipeline' 
    - task: PublishPipelineArtifact@1
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        targetPath: 'PrimeroEdge.SharedUtilities.Api/devops/deployment/sharedutilities/values.qa.yaml'
        artifact: 'qa_values'
        publishLocation: 'pipeline'  
          
    - task: Kubernetes@1
      displayName: Generate Dev secret
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Development-PrimeroEdgeDev-AKS-dev-1592763342384'
        namespace: 'dev'
        secretType: 'generic'
        secretArguments: '--from-file=PrimeroEdge.SharedUtilities.Api/appsettings.Development.json'
        secretName: 'sharedutilities-dev-secret-appsettings'

    - task: Kubernetes@1
      displayName: Kubernetes QA Secret
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Development-PrimeroEdgeQA-AKS-qa'
        namespace: 'qa'
        secretType: 'generic'
        secretArguments: '--from-file=PrimeroEdge.SharedUtilities.Api/appsettings.QA.json'
        secretName: 'sharedutilities-qa-secret-appsettings'
