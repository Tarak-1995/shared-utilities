# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest


variables:
  helmVersion: "3.2.3"
  HELM_EXPERIMENTAL_OCI: 1
  registryServerName: "$(registryName).azurecr.io"
  projectName: "sharedutilities"
  helmchartdev: "sharedutilities-dev"
  #helmChartVersion: "1.0.22"
  azure.service.connection: "Perseus-Non-prod-AKS-eastus-Stg"
  imageversion: "$(jq '.helmChartVersion' $(build.artifactStagingDirectory)/variables.json -r)"
  helmChartVersion: "$(jq '.helmChartVersion' $(build.artifactStagingDirectory)/variables.json -r)"

resources: 
  pipelines:
  - pipeline: ci-pipeline
    source: Perseus_SharedUtilities_QA
    trigger:
      enabled: true
      branches:
        include:
          - dev


stages:
- stage: Development
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/hpafixes-on-dev'))
  displayName: Development
  jobs:
  - deployment: Development
    variables:
    - name: imageName
      value: $(registryServerName)/sharedutilities-dev:$(imagtag)
      # define 5 more variables: aks, rg, aksSpId, aksSpSecret and aksSpTenantId in the Azure pipeline UI definition
    displayName: deploy helm chart into AKS
    pool:
      vmImage: ubuntu-latest
    environment: Development-$(projectName)
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none
          - task: HelmInstaller@1
            displayName: "install helm"
            inputs:
              helmVersionToInstall: $(helmVersion)

          - bash: |
              az login \
                  --service-principal \
                  -u $(aksSpId) \
                  -p '$(aksSpSecret)' \
                  --tenant $(aksSpTenantId)
              az aks get-credentials \
                  -n $(aks) \
                  -g $(rg)
            failOnStderr: false
            displayName: "pull helm chart"
            
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'specific'
              project: '53a56d2e-7e28-4303-aa5a-709c08931635'
              definition: '335'
              buildVersionToDownload: 'latest'
              artifactName: 'check'
              targetPath: '$(build.artifactStagingDirectory)/'
       
          - task: CmdLine@2
            displayName: check
            inputs:
              script: |
                echo $(imageversion)
                export imagetag = $(imageversion)
                echo $(registryPassword) | helm registry login $(registryServerName) --username $(registryLogin) --password-stdin
                helm chart pull $(registryServerName)/charts/$(helmchartdev):$(helmChartVersion)
                helm chart export $(registryServerName)/charts/$(helmchartdev):$(helmChartVersion) --destination $(pipeline.workspace)/install
          
          - task: replacetokens@3
            inputs:
              rootDirectory: '$(Pipeline.Workspace)/install'
              targetFiles: '**/*.yaml'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: true
              actionOnNoFiles: 'continue'
              enableTransforms: false
              tokenPrefix: '__'
              tokenSuffix: '__'
              useLegacyPattern: false
              enableTelemetry: true

          - task: HelmDeploy@0
            displayName: deploy chart to aks
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'Perseus Non-Prod (b0b91233-8bb9-44e7-b548-84412ecc5c0d)'
              azureResourceGroup: 'Perseus-nonprod-RG'
              kubernetesCluster: 'perseusnonprod-eastus2-AKS'
              useClusterAdmin: true
              namespace: 'test'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(pipeline.workspace)/install/sharedutilities/'
              chartVersion: '$(helmChartVersion)'
              releaseName: 'perseus-sharedutilities-dev'
              valueFile: '$(pipeline.workspace)/install/sharedutilities/values.eastus2.dev.yaml'
              #overrideValues: 'sharedutilitiesrepo=$(registryServerName)/sharedutilities-qa:$(helmChartVersion)'
              arguments: '--install'