# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest


variables:
  helmVersion: "3.2.3"
  HELM_EXPERIMENTAL_OCI: 1
  registryServerName: "$(registryName).azurecr.io"
  projectName: "sharedutilities"
  helmChartVersion: "1.0.12"
  azure.service.connection: "Perseus-Non-prod-AKS-eastus-Stg"

resources: 
  pipelines:
  - pipeline: ci-pipeline
    source: Perseus_SharedUtilities_QA
    trigger:
      enabled: true
      branches:
        include:
          - Devops/nonprod


stages:
- stage: Staging
  displayName: Staging
  jobs:
  - deployment: Staging
      # define 5 more variables: aks, rg, aksSpId, aksSpSecret and aksSpTenantId in the Azure pipeline UI definition
    displayName: deploy helm chart into AKS
    pool:
      vmImage: ubuntu-latest
    environment: staging-$(projectName)
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none
          - task: HelmInstaller@1
            displayName: "install helm"
            inputs:
              helmVersionToInstall: $(helmVersion)
          - download: ci-pipeline
            artifact: sharedutilities-qa
          - bash: |
              az login \
                  --service-principal \
                  -u $(aksSpId) \
                  -p '$(aksSpSecret)' \
                  --tenant $(aksSpTenantId)
              az aks get-credentials \
                  -n $(aks) \
                  -g $(rg)
              echo $(registryPassword) | helm registry login $(registryServerName) --username $(registryLogin) --password-stdin
              #helmChartVersion=$(jq .helmChartVersion $(pipeline.workspace)/ci-pipeline/sharedutilities-qa/variables.json -r)
              helm chart pull $(registryServerName)/charts/$(projectName):$(helmChartVersion)
              helm chart export $(registryServerName)/charts/$(projectName):$(helmChartVersion) --destination $(pipeline.workspace)/install
              helm upgrade \
                  --namespace $(k8sNamespace) \
                  --create-namespace \
                  --install \
                  --wait \
                  --version $helmChartVersion \
                  -f $(pipeline.workspace)/ci-pipeline/sharedutilities-qa/PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/devops/deployment/sharedutilities/templates/ingress.yaml \
                  -f $(pipeline.workspace)/ci-pipeline/sharedutilities-qa/PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/devops/deployment/sharedutilities/templates/service.yaml \
                  -f $(pipeline.workspace)/ci-pipeline/sharedutilities-qa/PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/devops/deployment/sharedutilities/templates/deployment.yaml \
                  -f $(pipeline.workspace)/ci-pipeline/sharedutilities-qa/PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/devops/deployment/sharedutilities/templates/secret.yaml \
                  -f $(pipeline.workspace)/ci-pipeline/sharedutilities-qa/PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/devops/deployment/sharedutilities/values.eastus2.stg.yaml
                  --set imageName=$(registryServerName)/sharedutilities-qa:$(helmChartVersion) \
                  $(projectName) \
                  $(pipeline.workspace)/install/$(projectName)
            failOnStderr: true
            displayName: "deploy helm chart"
                    
