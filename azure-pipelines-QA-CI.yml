# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker
#

trigger:
  - master

name: '1.0$(Rev:.r)'

resources:
  - repo: self

pool:
  vmImage: 'ubuntu-latest'
  
variables:

  # Env vars
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  HELM_EXPERIMENTAL_OCI: 1
  imageVersion: $(Build.BuildNumber)
  helmChartVersion: $(Build.BuildNumber)
  imageName: PerseusNonProdACR.azurecr.io/sharedutilities_qa:$(Build.BuildNumber)
  # .sln .csproj(UnitTests) relative paths
  project_sln: "PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.sln"
  project_csproj: "./PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/PrimeroEdge.SharedUtilities.Api.csproj"
  test_csproj: "./PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.UnitTests/PrimeroEdge.SharedUtilities.UnitTests.csproj"
  
  # Container registry service connection established during pipeline creation
  #dockerRegistryServiceConnection: 'PerseusNonProdACR'
  devschoolcafeimagerepository: 'schoolcafe-qa/sharedutilities.qaschoolcafe'
  imageRepository: 'sharedutilities_qa'
  stgimageRepository: 'sharedutilities_stg'
  migimageRepository: 'sharedutilities_mig'
  demoimageRepository: 'sharedutilities_demo'
  containerRegistry: 'perseusnonprodacr.azurecr.io'
  projectName: 'sharedutilities'
  dockerfilePath: '**/Dockerfile'
  imagePullSecret: 'perseusnonprodacr10848ea9-auth'
  helmChartPath: './PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/devops/deployment/sharedutilities/'
  # Agent VM image name
  vmImageNameW: 'windows-latest'
  vmImageNameU: 'ubuntu-latest'
  

stages:
- stage: BuildandAnalysis
  displayName: Build and Analysis
  jobs:
  - job: SLNBuild
    steps:
    - task: NuGetCommand@2
      inputs:  
        restoreSolution:  '--configfile NuGet.Config $(project_sln)'
    - script: dotnet build --configuration $(buildConfiguration)
      workingDirectory: "./PrimeroEdge.SharedUtilities"
      displayName: 'dotnet build $(buildConfiguration)'
    
  - job: CodeAM
    displayName: Code Analysis and Metrics
    dependsOn: SLNBuild 
    pool:
      vmImage: $(vmImageNameW)
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: build
        projects: '$(project_csproj)'
        arguments: '/p:RunCodeAnalysis=true'
        configuration: '$(buildConfiguration)'
    
    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: '$(test_csproj)'
        arguments: '--configuration $(buildConfiguration)'


    
- stage: ImageBuild
  displayName: Image Build $ Push
  dependsOn: BuildandAnalysis
  pool:
    vmImage: $(vmImageNameU)
  jobs:
  - job: ImageBuild
    steps:
    - task: Docker@2
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(imageVersion)
          latest


    - task: Docker@2
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/Release3.0-Pilot'))
      inputs:
        command: buildAndPush
        repository: $(stgimageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(imageVersion)
          latest


    - task: Docker@2
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/R4Sprint53-USDA'))
      inputs:
        command: buildAndPush
        repository: $(demoimageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(imageVersion)
          latest

    - task: HelmInstaller@1
      #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        helmVersionToInstall: '3.2.3'
    - bash: |
          echo $(registryPassword) | helm registry login $(registryName).azurecr.io --username $(registryLogin) --password-stdin
          cd PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/devops/deployment
          helm chart save $(helm package --app-version $(imageVersion) --version $(helmChartVersion) ./$(projectName) | grep -o '/.*.tgz') $(registryName).azurecr.io/charts/$(projectName):$(imageVersion)
          helm chart push $(registryName).azurecr.io/charts/$(projectName):$(imageVersion)
          echo $(jq -n --arg version "$(helmChartVersion)" '{helmChartVersion: $version}') > $(build.artifactStagingDirectory)/variables.json
      failOnStderr: true
      displayName: "helm package QA"
        

    - task: HelmInstaller@1
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/Release3.0-Pilot'))
      inputs:
        helmVersionToInstall: '3.2.3'
    - bash: |
          echo $(registryPassword) | helm registry login $(registryName).azurecr.io --username $(registryLogin) --password-stdin
          cd PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/devops/deployment
          helm chart save $(helm package --app-version $(imageVersion) --version $(helmChartVersion) ./$(projectName) | grep -o '/.*.tgz') $(registryName).azurecr.io/charts/$(projectName):$(imageVersion)
          helm chart push $(registryName).azurecr.io/charts/$(projectName):$(imageVersion)
          echo $(jq -n --arg version "$(helmChartVersion)" '{helmChartVersion: $version}') > $(build.artifactStagingDirectory)/variables.json
      failOnStderr: true
      displayName: "helm package Stg"

        
    - task: HelmInstaller@1
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/R4Sprint53-USDA'))
      inputs:
        helmVersionToInstall: '3.2.3'
    - bash: |
          echo $(registryPassword) | helm registry login $(registryName).azurecr.io --username $(registryLogin) --password-stdin
          cd PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/devops/deployment
          helm chart save $(helm package --app-version $(imageVersion) --version $(helmChartVersion) ./$(projectName) | grep -o '/.*.tgz') $(registryName).azurecr.io/charts/$(projectName):$(imageVersion)
          helm chart push $(registryName).azurecr.io/charts/$(projectName):$(imageVersion)
          echo $(jq -n --arg version "$(helmChartVersion)" '{helmChartVersion: $version}') > $(build.artifactStagingDirectory)/variables.json
      failOnStderr: true
      displayName: "helm package demo"      
  
- stage: HelmPackage
  displayName: Helm Chart Package
  dependsOn: ImageBuild
  jobs: 
  - job: HelmPackage
    displayName: Helm Package
    steps:
    - task: HelmDeploy@0
      inputs:
        command: 'package'
        chartPath: $(helmChartPath)
        destination: $(Build.ArtifactStagingDirectory)
        chartName: 'sharedutilities'  

    
- stage: Secret
  displayName: Generate secret
  dependsOn: HelmPackage
  jobs: 
  - job: QAKubesecret
    displayName: Kubernetes QA Secret
    steps:
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Perseus-Non-prod-AKS-eastus-QA'
        namespace: 'qa'
        secretType: 'generic'
        secretArguments: '--from-file=PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/appsettings.QA.json' 
        secretName: 'sharedutilities-qa-secret-appsettings'

    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Perseus-Non-prod-AKS-eastus-Stg'
        namespace: 'staging'
        secretType: 'generic'
        secretArguments: '--from-file=PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/appsettings.Staging.json' 
        secretName: 'sharedutilities-stg-secret-appsettings'

- stage: QABuildAndPush
  dependsOn: DockerVersion
  displayName: Build and Push QA Image
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
    - job: BuildQA
      variables:
        commitSHA: $[stageDependencies.DockerVersion.Generate.outputs['CommitSHA.shorthash']]
      steps:
        - task: Docker@2
          displayName: Build docker image
          inputs:
            command: buildAndPush
            repository: $(qaschoolcafeimageRepository)
            dockerfile: $(dockerfilePath)
            containerRegistry: $(dockerRegistryServiceConnection)
            tags: |
              $(tag)
              latest
              $(commitSHA)

        - bash: |
            git config --global user.email "azuredevops@primeroedge.com"
            git config --global user.name "azuredevops"
            git clone https://$(DEVOPS_USER):$(DEVOPS_TOKEN)@dev.azure.com/Cybersoft-Technologies-Inc/ArgoCD/_git/perseus-devqa-infra
            cd perseus-devqa-infra
            git checkout main

            dockerImageUrl="perseusnonprodacr.azurecr.io/$(qaschoolcafeimageRepository):$(commitSHA)"
            sed -i "/image/c\image: $dockerImageUrl" platform/sharedutilities/api/values.yaml

            git add .
            git commit -m 'AzDevops Image update commit sha: $(commitSHA)'
            git push origin main
          displayName: Push QA image to ACR and update infra repo tag 

        - bash: |
            curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/download/v2.8.9/argocd-linux-amd64
            chmod +x ./argocd
            ./argocd login qagitops.perseusedge.com --skip-test-tls --grpc-web --insecure --username $(ARGOCD_LOGIN) --password $(ARGOCD_PASSWORD)
            ./argocd app sync schoolcafe-qa-Sharedutilities-api
            ./argocd logout qagitops.perseusedge.com
          displayName: Sync QA SharedUtilities Api