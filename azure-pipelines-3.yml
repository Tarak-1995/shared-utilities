# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker
#

trigger:
  - master

name: '1.0$(Rev:.r)'

resources:
  - repo: self
  
variables:

  # Env vars
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  HELM_EXPERIMENTAL_OCI: 1
  imageVersion: '1.0.+$(Rev:.r)'
  helmChartVersion: '1.0.+$(Rev:.r)'
  # .sln .csproj(UnitTests) relative paths
  project_sln: "PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.sln"
  project_csproj: "./PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/PrimeroEdge.SharedUtilities.Api.csproj"
  test_csproj: "./PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.UnitTests/PrimeroEdge.SharedUtilities.UnitTests.csproj"
  
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '080de9e3-d7ce-498e-947e-3a9429ac3931'
  imageRepository: 'sharedutilities_qa'
  containerRegistry: 'perseusnonprodacr.azurecr.io'
  projectName: 'sharedutilities'
  dockerfilePath: '**/Dockerfile'
  imagePullSecret: 'perseusnonprodacr10848ea9-auth'
  helmChartPath: './PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/devops/deployment/sharedutilities/'
  # Agent VM image name
  vmImageNameW: 'vs2017-win2016'
  vmImageNameU: 'ubuntu-latest'
  

stages:
- stage: BuildandAnalysis
  displayName: Build and Analysis
  jobs:
  - job: SLNBuild
    steps:
    - task: NuGetCommand@2
      inputs:  
        restoreSolution:  '--configfile NuGet.Config $(project_sln)'
    - script: dotnet build --configuration $(buildConfiguration)
      workingDirectory: "./PrimeroEdge.SharedUtilities"
      displayName: 'dotnet build $(buildConfiguration)'
    
  - job: CodeAM
    displayName: Code Analysis and Metrics
    dependsOn: SLNBuild 
    pool:
      vmImage: $(vmImageNameW)
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: build
        projects: '$(project_csproj)'
        arguments: '/p:RunCodeAnalysis=true'
        configuration: '$(buildConfiguration)'
    
    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: '$(test_csproj)'
        arguments: '--configuration $(buildConfiguration)'


    
- stage: ImageBuild
  displayName: Image Build $ Push
  dependsOn: BuildandAnalysis
  pool:
    vmImage: $(vmImageNameU)
  jobs:
  - job: ImageBuild
    steps:
    - task: Docker@2
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(imageVersion)
          latest
    - task: HelmInstaller@1
      inputs:
        helmVersionToInstall: '3.2.3'
    - bash: |
          echo $(registryPassword) | helm registry login $(registryName).azurecr.io --username $(registryLogin) --password-stdin
          cd PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/devops/deployment
          helm chart save $(helm package --app-version $(imageVersion) --version $(helmChartVersion) ./$(projectName) | grep -o '/.*.tgz') $(registryName).azurecr.io/charts/$(projectName):$(imageVersion)
          helm chart push $(registryName).azurecr.io/charts/$(projectName):$(imageVersion)
      failOnStderr: true
      displayName: "helm package"
        
      
  
- stage: HelmPackage
  displayName: Helm Chart Package
  dependsOn: ImageBuild
  jobs: 
  - job: HelmPackage
    displayName: Helm Package
    steps:
    - task: HelmDeploy@0
      inputs:
        command: 'package'
        chartPath: $(helmChartPath)
        destination: $(Build.ArtifactStagingDirectory)
        chartName: 'sharedutilities'  
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/a/sharedutilities-0.1.0.tgz'
        artifact: 'sharedutilities-qa'
        publishLocation: 'pipeline'
        
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/devops/deployment/sharedutilities'
        artifact: 'qa_values'
        publishLocation: 'pipeline'
    
- stage: Secret
  displayName: Generate secret
  dependsOn: HelmPackage
  jobs: 
  - job: QAKubesecret
    displayName: Kubernetes QA Secret
    steps:
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Perseus-Non-prod-AKS-eastus-QA'
        namespace: 'qa'
        secretType: 'generic'
        secretArguments: '--from-file=PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/appsettings.QA.json' 
        secretName: 'sharedutilities-qa-secret-appsettings'

    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Perseus-Non-prod-AKS-eastus-Stg'
        namespace: 'staging'
        secretType: 'generic'
        secretArguments: '--from-file=PrimeroEdge.SharedUtilities/PrimeroEdge.SharedUtilities.Api/appsettings.Staging.json' 
        secretName: 'sharedutilities-stg-secret-appsettings'